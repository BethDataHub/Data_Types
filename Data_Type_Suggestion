/*Enter your server name below*/
$Server = ""

##Get each user database (To be evaluated by this data type suggestion process)
$Databases = (Invoke-Sqlcmd -ServerInstance $Server -Database Master -Query "SELECT [Name] FROM sys.databases
WHERE [Name] NOT IN ('master','model','msdb','tempdb')").Name

##Loop through Databases to get all column info
try {
      foreach ($Database in $Databases)
      {
         ##Get table names and info for column suggestions
         $Tables = (Invoke-Sqlcmd -ServerInstance $Server -Database $Database -Query "SELECT [Name],[Object_id] FROM sys.tables;").Name

         ##Loop through tables to check each column's current state (e.g. NVARCHAR with a max string length of 50)
         foreach ($Table in $Tables)
         {
            try {
                  $Columns = (Invoke-Sqlcmd -ServerInstance $Server -Database $Database -Query "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS C WHERE TABLE_NAME = '$($Table)' ;").Column_Name

                  ##Loop each column to check values
                  foreach ($Column in $Columns)
                  { 
                    $Columnsinfo = (Invoke-Sqlcmd -ServerInstance $Server -Database $Database -Query "SELECT COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS C WHERE TABLE_NAME = '$($Table)' AND COLUMN_NAME = '$($Column)';")  
                    $Data_Type = $ColumnsInfo.DATA_TYPE
                    $MaxChar = $Columnsinfo.Character_Maximum_Length

                    ##Check string values
                    if ($Data_Type -like "*char")
                    {
                        $UnicodeCheck = (Invoke-Sqlcmd -ServerInstance $Server -Database $Database -Query "SELECT COUNT(*) AS NCount FROM [dbo].[$($Table)] WHERE CAST([$($Column)] AS CHAR) <> [$($Column)]").NCount
                        $FixedLengthCheck = (Invoke-Sqlcmd -ServerInstance $Server -Database $Database -Query "SELECT COUNT(DISTINCT LEN([$($Column)])) AS LCount FROM [dbo].[$($Table)]").LCount
                        $MaxLength = (Invoke-Sqlcmd -ServerInstance $Server -Database $Database -Query "SELECT MAX(LEN([$($Column)])) AS MCount FROM [dbo].[$($Table)]").MCount
                        ##If value doesn't contain unicode then CHAR OR VARCHAR else NCHAR OR NVARCHAR
                        if ($UnicodeCheck -eq 0)
                        {
                            ##Value doesn't contain unicode and if value has a fixed length then CHAR else VARCHAR
                            if ($FixedLengthCheck -eq 1)
                            {
                                Write-Host "CHAR($($MaxLength)) - $($Column) - $($Table)"
                            }
                            else
                            {
                                Write-Host "VARCHAR($($MaxLength)) - $($Column) - $($Table)"
                            }
                        }

                        else
                        {
                            ##Value contains unicode and if value has a fixed length then NCHAR else NVARCHAR
                            if ($FixedLengthCheck -eq 1)
                            {
                                Write-Host "NCHAR($($MaxLength)) - $($Column) - $($Table)"
                            }
                            else
                            {
                                Write-Host "NVARCHAR($($MaxLength)) - $($Column) - $($Table)"
                            }
                        }
                    }
                    elseif ($Data_Type -like "*int")
                    {
                        ##Get Min and Max number to determine suitable int type
                        $MaxNum = (Invoke-Sqlcmd -ServerInstance $Server -Database $Database -Query "SELECT MAX($($Column)) AS MaxNum FROM [dbo].[$($Table)]").MaxNum
                        $MinNum = (Invoke-Sqlcmd -ServerInstance $Server -Database $Database -Query "SELECT MIN($($Column)) AS MinNum FROM [dbo].[$($Table)]").MinNum

                        ##If values are between 0 to 255 then TinyInt (1 byte)
                        if ($MinNum -ge 0 -and $MaxNum -le 255 -and $Column -notlike "*id*")
                        {
                            Write-Host "TinyInt - $($Column) - $($Table)"
                        }
                        ##If values are between -32,768 to 32,767 then SmallInt (2 bytes)
                        elseif ($MinNum -ge -32768 -and $MaxNum -le 32767)
                        {                             
                            Write-Host "SmallInt - $($Column) - $($Table)"
                        }
                        ##If values are between -2,147,483,648 to 2,147,483,647 then Int (4 bytes)
                        elseif ($MinNum -ge -2147483648 -and $MaxNum -le 2147483647)
                        {                             
                            Write-Host "Int - $($Column) - $($Table)"
                        }
                        ##If values are between -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 then BigInt (8 bytes)
                        elseif ($MinNum -ge -9223372036854775808 -and $MaxNum -le 9223372036854775807)
                        {                             
                            Write-Host "BigInt - $($Column) - $($Table)"
                        }
                        else
                        {
                            Write-Host "Error - $($Column) - $($Table)"
                        }

                    }
                    elseif ($Data_Type -like "*datetime")
                    {
                        ##If all times have been captured as 00:00:00 then consider Date instead of DateTime
                        $TimeCheck = (Invoke-Sqlcmd -ServerInstance $Server -Database $Database -Query "SELECT COUNT(*) AS TimeCheck FROM [dbo].[$($Table)] WHERE CAST(RIGHT([$($Column)],12) AS TIME) <> '00:00:00';").TimeCheck
                        $DateCheck = (Invoke-Sqlcmd -ServerInstance $Server -Database $Database -Query "SELECT COUNT(*) AS DateCheck FROM [dbo].[$($Table)] WHERE CONVERT(char(10), $($Column),126) < '1900-01-01';").DateCheck
                        if ($TimeCheck -eq 0)
                        {
                            Write-Host "Date - $($Column) - $($Table)"
                        }
                        else
                        {
                            if ($DateCheck -eq 0)
                            {
                                Write-Host "SmallDateTime - $($Column) - $($Table)"
                            }
                            else
                            {
                                Write-Host "DateTime - $($Column) - $($Table)"
                            }
                            
                        }
                    }
                    else
                    {
                        Write-Host "Not evaluated - $($Column) - $($Table)"
                    }
                  }
                }
            catch { Write-Host "Error while looping through $($Table)" }
         }
      }

    }
catch { Write-Host "Error while looping through $($Database)" }  
